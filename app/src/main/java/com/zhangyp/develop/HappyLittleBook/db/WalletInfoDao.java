package com.zhangyp.develop.HappyLittleBook.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhangyp.develop.HappyLittleBook.bean.WalletInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WALLET_INFO".
*/
public class WalletInfoDao extends AbstractDao<WalletInfo, Long> {

    public static final String TABLENAME = "WALLET_INFO";

    /**
     * Properties of entity WalletInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Money = new Property(1, double.class, "money", false, "MONEY");
        public final static Property WalletName = new Property(2, String.class, "walletName", false, "WALLET_NAME");
        public final static Property AddTime = new Property(3, String.class, "addTime", false, "ADD_TIME");
        public final static Property WalletNote = new Property(4, String.class, "walletNote", false, "WALLET_NOTE");
    }


    public WalletInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WalletInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WALLET_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MONEY\" REAL NOT NULL ," + // 1: money
                "\"WALLET_NAME\" TEXT," + // 2: walletName
                "\"ADD_TIME\" TEXT," + // 3: addTime
                "\"WALLET_NOTE\" TEXT);"); // 4: walletNote
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WALLET_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WalletInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getMoney());
 
        String walletName = entity.getWalletName();
        if (walletName != null) {
            stmt.bindString(3, walletName);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(4, addTime);
        }
 
        String walletNote = entity.getWalletNote();
        if (walletNote != null) {
            stmt.bindString(5, walletNote);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WalletInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getMoney());
 
        String walletName = entity.getWalletName();
        if (walletName != null) {
            stmt.bindString(3, walletName);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(4, addTime);
        }
 
        String walletNote = entity.getWalletNote();
        if (walletNote != null) {
            stmt.bindString(5, walletNote);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WalletInfo readEntity(Cursor cursor, int offset) {
        WalletInfo entity = new WalletInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // money
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // walletName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // addTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // walletNote
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WalletInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMoney(cursor.getDouble(offset + 1));
        entity.setWalletName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWalletNote(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WalletInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WalletInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WalletInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
